#!/usr/bin/perl
#/*#########################################################################################
#                       (C) Copyright 2018 Acxiom LLC
#                               All Rights Reserved.
############################################################################################
#
# Script: model-citizen
# Author: Caleb Hankins - chanki
# Date:   2018-09-13
#
# Purpose: Export Oracle Data Modeler files as json and or SQL DDL for easier consumption by other processes
#
############################################################################################
# MODIFICATION HISTORY
##-----------------------------------------------------------------------------------------
# DATE        PROGRAMMER                   DESCRIPTION
##-----------------------------------------------------------------------------------------
# 2018-09-13  Caleb Hankins - chanki       Initial Copy
###########################################################################################*/

use strict;
use warnings;
use v5.10;
use IO::Handle;                                 # Supply object methods for I/O handles
use Getopt::Long;                               # Extended processing of command line options
use Pod::Usage;                                 # Print a usage message from embedded pod documentation
use Cwd qw( cwd abs_path );                     # Get current working directory and absolute file paths
use File::Basename;                             # Parse file paths into directory, filename and suffix
use File::Glob ':glob';                         # Perl extension for BSD glob routine
use lib dirname(dirname(__FILE__)) . '/lib';    # Use local libraries if we have them
use ModelCitizen;                               # Helper code for file processing and model interaction
no if $] >= 5.017011, warnings => 'experimental::smartmatch';    # Suppress smartmatch warnings

# Turn on auto-flush / hot pipes
STDOUT->autoflush(1);
STDERR->autoflush(1);

# User options that we'll set using GetOptions()
my $modelFilepath  = '';
my $outputFileSQL  = '';
my $outputFileJSON = '';
my $typesFilePath  = '';
my $RDBMS          = 'Oracle Database 12c';                      # Default target RDBMS SQL to generate
my $testMode       = '';
my $verbose        = '';

my $rc = GetOptions(
  'f|modelFilepath=s'            => \$modelFilepath,
  'RDBMS|rdbms=s'                => \$RDBMS,
  'typesFilePath=s'              => \$typesFilePath,
  'o|outputFile|outputFileSQL=s' => \$outputFileSQL,
  'outputFileJSON=s'             => \$outputFileJSON,

  't|testMode' => \$testMode,
  'v|verbose'  => \$verbose,

  # Version info
  'version' => sub { print("model-citizen Version: $ModelCitizen::VERSION\n"); exit; },

  # pod2usage variables
  'help' => sub { pod2usage(1); },
  'man'  => sub { pod2usage(-exitstatus => 0, -verbose => 2); }
);

# Give script options the ol' sanity check
sanityCheckOptions();

# Print script config info to log
logScriptConfig();

# Load type lookup info
my $types = ModelCitizen::loadTypes($typesFilePath);

# Construct a list of files to munge and log file details
$ModelCitizen::logger->info("Opening data model from [$modelFilepath]...");
my @inputFiles = ModelCitizen::buildPackageFileList($modelFilepath, '.xml');
if ($verbose) { ModelCitizen::logFileInformation(\@inputFiles, 'Input', $modelFilepath); }
my $inputFileCnt = @inputFiles;
$ModelCitizen::logger->info("[$inputFileCnt] files have been identified for analysis.");

# Load files to form our model
$ModelCitizen::logger->info("Parsing data model files loaded from from [$modelFilepath]...");
my $model = ModelCitizen::loadModel(\@inputFiles);

# Export model as SQL (if asked)
if ($outputFileSQL && $types && $RDBMS) {
  $ModelCitizen::logger->info("Exporting data model as $RDBMS sql to [$outputFileSQL]...");
  my $sql = ModelCitizen::getSQL($model, $types, $RDBMS);
  ModelCitizen::createExportFile($sql, $outputFileSQL);
}

# Export model as json
if ($outputFileJSON) {
  $ModelCitizen::logger->info("Exporting data model as json to [$outputFileJSON]...");
  ModelCitizen::createExportFile($ModelCitizen::json->encode($model), $outputFileJSON);
}

# Log out warning if we couldn't find any files to load
if (!@inputFiles > 0) {
  $ModelCitizen::logger->warn("No files were found to work on. You might want to check that out.");
}

##---------------------------------------------------------------------------
END {
  exit(ModelCitizen::signOff($?));
}
##---------------------------------------------------------------------------

##---------------------------------------------------------------------------
# Give script options the ol' sanity check
sub sanityCheckOptions {
  my $subName = (caller(0))[3];

  # Shell style filename expansions for things in the path like tilde or wildcards
  $modelFilepath  = bsd_glob($modelFilepath);
  $typesFilePath  = bsd_glob($typesFilePath);
  $outputFileJSON = bsd_glob($outputFileJSON);
  $outputFileSQL  = bsd_glob($outputFileSQL);

  # Make sure we have all our required parms set
  ModelCitizen::checkRequiredParm($modelFilepath, 'modelFilepath');
  ModelCitizen::checkRequiredParm($RDBMS,         'RDBMS');

  # Set package level variables
  $ModelCitizen::verbose = $verbose;

  # Check for errors before starting processing
  if ($ModelCitizen::logger->get_count("ERROR") > 0) {

    # Print informational message to standard output
    $ModelCitizen::logger->info(  "$subName There were ["
                                . $ModelCitizen::logger->get_count("ERROR")
                                . "] error messages detected while sanity checking options. Script is halting.");

    # Exit with a non-zero code and print usage
    pod2usage(10);
  } ## end if ($ModelCitizen::logger...)

  return;
} ## end sub sanityCheckOptions
##---------------------------------------------------------------------------

##---------------------------------------------------------------------------
# Print [Script Config Information] to log
sub logScriptConfig {
  $ModelCitizen::logger->info("[Script Config Information]");
  $ModelCitizen::logger->info("  script path:             [$0]");
  $ModelCitizen::logger->info("  modelFilepath:           [$modelFilepath]");
  $ModelCitizen::logger->info("  outputFileSQL:           [$outputFileSQL]");
  $ModelCitizen::logger->info("  outputFileJSON:          [$outputFileJSON]");
  $ModelCitizen::logger->info("  RDBMS:                   [$RDBMS]");

  if (defined $typesFilePath and length($typesFilePath) > 0) {
    $ModelCitizen::logger->info("  typesFilePath:           [$typesFilePath]");
  }

  $testMode
    ? $ModelCitizen::logger->info("  testMode:                [Enabled]")
    : $ModelCitizen::logger->info("  testMode:                [Disabled]");
  $verbose
    ? $ModelCitizen::logger->info("  verbose:                 [Enabled]")
    : $ModelCitizen::logger->info("  verbose:                 [Disabled]");
  $ModelCitizen::logger->info("");

  return;
} ## end sub logScriptConfig
##---------------------------------------------------------------------------

##---------------------------------------------------------------------------
# Podusage

__END__

=head1 AUTHOR

Caleb Hankins - chanki

=head1 NAME

model-citizen

=head1 SYNOPSIS

model-citizen: Export Oracle Data Modeler files as json and or SQL DDL for easier consumption by other processes 

 Options:
    i|f|modelFilepath           String. Directory path where data model lives.
    typesFilePath               String. File path of XML file containing type lookup information. This file can be located in your Oracle Data Modeler install directory at ${MODELER_HOME}/datamodeler/datamodeler/types/types.xml
    RDBMS|rdbms                 String. Target RDBMS system type. Defaults to 'Oracle Database 12c'. Must be defined in the 'types' file.
    o|outputFile|outputFileSQL  String. Output file path for SQL DDL file built off the model.
    outputFileJSON              String. Output file path for json file built off the model. This will be an array of json documents.
    t|testMode                  Flag. Skip call to create output file(s) but print all of the other information.
    v|verbose                   Flag. Print more verbose output.
    version                     Flag. Print version information.
    help                        Print brief help information.
    man                         Read the manual, includes examples.

=head1 EXAMPLES

  model-citizen  --outputFileSQL ./scratch/ddl.sql --outputFileJSON ./scratch/model.json --modelFilepath 'C:\git\datamodels\MY_AWESOME_DATA_MODEL\'

=cut
##---------------------------------------------------------------------------
